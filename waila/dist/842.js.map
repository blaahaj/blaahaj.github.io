{"version":3,"file":"842.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA6D;AAC3B;AAC3B,2BAA2B,0CAAsB;AACxD,eAAe,mBAAO;AACtB,CAAC;;;;;;;ACJM;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;ACP4G;AAC1D;AAC3C,eAAe,uCAAmB,yBAAyB,oCAAoC;AACtG,uBAAuB,kBAAa;AACpC,WAAW,0CAAmB,SAAS,qCAAa;AACpD;AACA,KAAK;AACL,CAAC,EAAE,YAAY;;;ACP6F;AAC9C;AACvD,qBAAqB,uCAAmB,+BAA+B,oCAAoC;AAClH,uBAAuB,wBAAmB;AAC1C,WAAW,0CAAmB,SAAS,qCAAa;AACpD;AACA,KAAK;AACL,CAAC,EAAE,YAAY;;;ACP+E;AAChC;AACvD,qBAAqB,uCAAmB,+BAA+B,2BAA2B;AACzG,sBAAsB,wBAAmB;AACzC,WAAW,0CAAmB,QAAQ,qCAAa;AACnD;AACA;AACA,KAAK;AACL,CAAC;;;ACR6F;AAC1C;AAC7C,gBAAgB,uCAAmB,0BAA0B,mBAAmB;AACvF,wBAAwB,mBAAc;AACtC,WAAW,0CAAmB,UAAU,qCAAa;AACrD;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,CAAC;;;ACfsC;AAChC;AACP,gCAAgC,wBAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACZmH;AACvC;AACrE,qBAAqB,wCAAoB,+BAA+B,2BAA2B;AAC1G,wBAAwB,wBAAmB;AAC3C,WAAW,0CAAmB,UAAU,qCAAa;AACrD;AACA,KAAK;AACL,CAAC;AACD,IAAI,kBAAkB;AACtB;AACA,+CAA+C,wBAAY,sBAAsB,wBAAY;AAC7F;AACA;AACA;AACA;AACA;AACA,CAAC;;;AChB8F;AACrC;AACnD,mBAAmB,wCAAoB,6BAA6B,2BAA2B;AACtG,sBAAsB,sBAAiB;AACvC,WAAW,0CAAmB,QAAQ,qCAAa;AACnD;AACA,KAAK;AACL,CAAC;;;;;;;;;ACP4K;AAC3I;AAC+C;AAC1E,gCAAgC,wCAAiB,gCAAgC,2BAA2B;AACnH,wBAAwB,mBAAO;AAC/B,WAAW,0CAAmB,UAAU,qCAAa;AACrD;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,CAAC;AACM,yBAAyB,oCAAiB;AACjD;AACO,sBAAsB,8CAAwB;AAC9C;AACP;AACA,8BAA8B,yCAAiB;AAC/C,yBAAyB,0BAAM;AAC/B,kCAAkC,4BAAQ;AAC1C,gBAAgB,uBAAuB;AACvC,yBAAyB,+BAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4BAA4B,+BAAW;AACvC;AACA;AACA,SAAS;AACT;AACA;AACA,wBAAwB,2BAAO;AAC/B,mBAAmB,qCAAa;AAChC;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,QAAQ,6BAAS;AACjB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,SAAS;AACT,8CAA8C,6BAAmB,CAAC,mCAAe;AACjF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;;;;;;;AC5EiC;AAClC;AACA;AACA;AACO;AACP;AACA,QAAQ,mBAAO;AACf,KAAK;AACL;AACO;AACP;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvBuF;AACM;AACpD;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yBAAyB;AACrC;AACA;AACA;AACA;AACA,qGAAqG,KAAK;AAC1G;AACA;AACA,iEAAiE,KAAK;AACtE;AACA;AACA;AACA;AACA;AACA,QAAQ,YAAY;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,4BAAQ;AAC/B,0CAA0C,4BAAQ;AAClD,IAAI,uCAAmB;AACvB;AACA;AACA,oBAAoB,yCAAiB;AACrC;AACA,uBAAuB,2BAAO;AAC9B;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,6BAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,yEAAyE,mCAAY,eAAe,6BAAmB,CAAC,mCAAe;AACvI;AACA,KAAK;AACL;AACO,2BAA2B,8BAAU;;;ACvEkD;AAC1C;AAC7C,gBAAgB,uCAAmB,0BAA0B,wBAAwB;AAC5F,wBAAwB,mBAAc;AACtC,WAAW,0CAAmB,UAAU,qCAAa;AACrD;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA,CAAC;;;ACX6F;AACxC;AAC/C,iBAAiB,uCAAmB,2BAA2B,wBAAwB;AAC9F,yBAAyB,oBAAe;AACxC,WAAW,0CAAmB,WAAW,qCAAa;AACtD;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA,CAAC;;;ACXiF;AAClC;AACd;AAC3B,cAAc,0CAAsB;AAC3C,sBAAsB,iBAAY;AAClC,WAAW,0CAAmB;AAC9B,CAAC,iDAAiD,WAAW;AAC7D,IAAI,6BAAS;AACb,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC;;;AChD6F;AACtC;AACjD,kBAAkB,uCAAmB,4BAA4B,qBAAqB;AAC7F,0BAA0B,qBAAgB;AAC1C,WAAW,0CAAmB,YAAY,qCAAa;AACvD;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA,CAAC;;;;;;;ACXiH;AACxD;AACF;AACf;AAClC,6BAA6B,wCAAiB;AACrD,YAAY,mCAAmC;AAC/C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,wBAAwB,sBAAiB;AACzC,WAAW,0CAAmB;AAC9B,CAAC,EAAE,kBAAkB;AACd,sBAAsB,oCAAe;AAC5C,+BAA+B,uBAAuB;AACtD,YAAY,wBAAwB;AACpC,IAAI,uCAAmB;AACvB,wEAAwE,mCAAY;AACpF;AACO,iCAAiC,8BAAU;;;;;ACtBgC;AAC9B;AAClB;AAC3B,gBAAgB,0CAAsB;AAC7C,wBAAwB,mBAAc;AACtC,WAAW,0CAAmB;AAC9B,CAAC,mDAAmD,WAAW;AAC/D,IAAI,6BAAS;AACb;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC;;;AChDkH;AACrD;AACvD,qBAAqB,wCAAoB,+BAA+B,2BAA2B;AAC1G,wBAAwB,wBAAmB;AAC3C;AACA;AACA;AACA,WAAW,0CAAmB,UAAU,qCAAa;AACrD;AACA,KAAK;AACL,CAAC;AACD,IAAI,kBAAkB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,CAAC;;;;;;;ACvB8G;AAC3E;AAC7B,qBAAqB,4CAAwB,+BAA+B,gCAAgC,oBAAoB;AACvI,sBAAsB,qBAAS;AAC/B;AACA,WAAW,wBAAQ;AACnB,KAAK;AACL,WAAW,0CAAmB;AAC9B,CAAC;AACD,IAAI,qCAAe;AACnB;AACA;AACA;AACA,CAAC;;;ACb4D;AAC3B;AAC3B,oBAAoB,0CAAsB;AACjD,eAAe,mBAAO;AACtB,CAAC;;;ACJ8D;AACF;AACxB;AACY;AACA;AACV;AACU;AACJ;AACM;AACF;AACZ;AACJ;AACM;AACE;AACN;AACQ;AACM;AACJ;AACF;AACJ;AACU;AACA;AACF","sources":["webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/AttributionControl.js","webpack:///./node_modules/.pnpm/@react-leaflet+core@2.1.0_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-leaflet/core/lib/circle.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/Circle.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/CircleMarker.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/FeatureGroup.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/GeoJSON.js","webpack:///./node_modules/.pnpm/@react-leaflet+core@2.1.0_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-leaflet/core/lib/media-overlay.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/ImageOverlay.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/LayerGroup.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/LayersControl.js","webpack:///./node_modules/.pnpm/@react-leaflet+core@2.1.0_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-leaflet/core/lib/dom.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/Pane.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/Polygon.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/Polyline.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/Popup.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/Rectangle.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/SVGOverlay.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/Tooltip.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/VideoOverlay.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/WMSTileLayer.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/ZoomControl.js","webpack:///./node_modules/.pnpm/react-leaflet@4.2.1_leaflet@1.9.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-leaflet/lib/index.js"],"sourcesContent":["import { createControlComponent } from '@react-leaflet/core';\nimport { Control } from 'leaflet';\nexport const AttributionControl = createControlComponent(function createAttributionControl(props) {\n    return new Control.Attribution(props);\n});\n","export function updateCircle(layer, props, prevProps) {\n    if (props.center !== prevProps.center) {\n        layer.setLatLng(props.center);\n    }\n    if (props.radius != null && props.radius !== prevProps.radius) {\n        layer.setRadius(props.radius);\n    }\n}\n","import { createElementObject, createPathComponent, extendContext, updateCircle } from '@react-leaflet/core';\nimport { Circle as LeafletCircle } from 'leaflet';\nexport const Circle = createPathComponent(function createCircle({ center , children: _c , ...options }, ctx) {\n    const circle = new LeafletCircle(center, options);\n    return createElementObject(circle, extendContext(ctx, {\n        overlayContainer: circle\n    }));\n}, updateCircle);\n","import { createElementObject, createPathComponent, extendContext, updateCircle } from '@react-leaflet/core';\nimport { CircleMarker as LeafletCircleMarker } from 'leaflet';\nexport const CircleMarker = createPathComponent(function createCircleMarker({ center , children: _c , ...options }, ctx) {\n    const marker = new LeafletCircleMarker(center, options);\n    return createElementObject(marker, extendContext(ctx, {\n        overlayContainer: marker\n    }));\n}, updateCircle);\n","import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { FeatureGroup as LeafletFeatureGroup } from 'leaflet';\nexport const FeatureGroup = createPathComponent(function createFeatureGroup({ children: _c , ...options }, ctx) {\n    const group = new LeafletFeatureGroup([], options);\n    return createElementObject(group, extendContext(ctx, {\n        layerContainer: group,\n        overlayContainer: group\n    }));\n});\n","import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { GeoJSON as LeafletGeoJSON } from 'leaflet';\nexport const GeoJSON = createPathComponent(function createGeoJSON({ data , ...options }, ctx) {\n    const geoJSON = new LeafletGeoJSON(data, options);\n    return createElementObject(geoJSON, extendContext(ctx, {\n        overlayContainer: geoJSON\n    }));\n}, function updateGeoJSON(layer, props, prevProps) {\n    if (props.style !== prevProps.style) {\n        if (props.style == null) {\n            layer.resetStyle();\n        } else {\n            layer.setStyle(props.style);\n        }\n    }\n});\n","import { LatLngBounds } from 'leaflet';\nexport function updateMediaOverlay(overlay, props, prevProps) {\n    if (props.bounds instanceof LatLngBounds && props.bounds !== prevProps.bounds) {\n        overlay.setBounds(props.bounds);\n    }\n    if (props.opacity != null && props.opacity !== prevProps.opacity) {\n        overlay.setOpacity(props.opacity);\n    }\n    if (props.zIndex != null && props.zIndex !== prevProps.zIndex) {\n        // @ts-ignore missing in definition but inherited from ImageOverlay\n        overlay.setZIndex(props.zIndex);\n    }\n}\n","import { createElementObject, createLayerComponent, extendContext, updateMediaOverlay } from '@react-leaflet/core';\nimport { LatLngBounds, ImageOverlay as LeafletImageOverlay } from 'leaflet';\nexport const ImageOverlay = createLayerComponent(function createImageOveraly({ bounds , url , ...options }, ctx) {\n    const overlay = new LeafletImageOverlay(url, bounds, options);\n    return createElementObject(overlay, extendContext(ctx, {\n        overlayContainer: overlay\n    }));\n}, function updateImageOverlay(overlay, props, prevProps) {\n    updateMediaOverlay(overlay, props, prevProps);\n    if (props.bounds !== prevProps.bounds) {\n        const bounds = props.bounds instanceof LatLngBounds ? props.bounds : new LatLngBounds(props.bounds);\n        overlay.setBounds(bounds);\n    }\n    if (props.url !== prevProps.url) {\n        overlay.setUrl(props.url);\n    }\n});\n","import { createElementObject, createLayerComponent, extendContext } from '@react-leaflet/core';\nimport { LayerGroup as LeafletLayerGroup } from 'leaflet';\nexport const LayerGroup = createLayerComponent(function createLayerGroup({ children: _c , ...options }, ctx) {\n    const group = new LeafletLayerGroup([], options);\n    return createElementObject(group, extendContext(ctx, {\n        layerContainer: group\n    }));\n});\n","import { LeafletProvider, createContainerComponent, createControlHook, createElementHook, createElementObject, extendContext, useLeafletContext } from '@react-leaflet/core';\nimport { Control } from 'leaflet';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nexport const useLayersControlElement = createElementHook(function createLayersControl({ children: _c , ...options }, ctx) {\n    const control = new Control.Layers(undefined, undefined, options);\n    return createElementObject(control, extendContext(ctx, {\n        layersControl: control\n    }));\n}, function updateLayersControl(control, props, prevProps) {\n    if (props.collapsed !== prevProps.collapsed) {\n        if (props.collapsed === true) {\n            control.collapse();\n        } else {\n            control.expand();\n        }\n    }\n});\nexport const useLayersControl = createControlHook(useLayersControlElement);\n// @ts-ignore\nexport const LayersControl = createContainerComponent(useLayersControl);\nexport function createControlledLayer(addLayerToControl) {\n    return function ControlledLayer(props) {\n        const parentContext = useLeafletContext();\n        const propsRef = useRef(props);\n        const [layer, setLayer] = useState(null);\n        const { layersControl , map  } = parentContext;\n        const addLayer = useCallback((layerToAdd)=>{\n            if (layersControl != null) {\n                if (propsRef.current.checked) {\n                    map.addLayer(layerToAdd);\n                }\n                addLayerToControl(layersControl, layerToAdd, propsRef.current.name);\n                setLayer(layerToAdd);\n            }\n        }, [\n            layersControl,\n            map\n        ]);\n        const removeLayer = useCallback((layerToRemove)=>{\n            layersControl?.removeLayer(layerToRemove);\n            setLayer(null);\n        }, [\n            layersControl\n        ]);\n        const context = useMemo(()=>{\n            return extendContext(parentContext, {\n                layerContainer: {\n                    addLayer,\n                    removeLayer\n                }\n            });\n        }, [\n            parentContext,\n            addLayer,\n            removeLayer\n        ]);\n        useEffect(()=>{\n            if (layer !== null && propsRef.current !== props) {\n                if (props.checked === true && (propsRef.current.checked == null || propsRef.current.checked === false)) {\n                    map.addLayer(layer);\n                } else if (propsRef.current.checked === true && (props.checked == null || props.checked === false)) {\n                    map.removeLayer(layer);\n                }\n                propsRef.current = props;\n            }\n        });\n        return props.children ? /*#__PURE__*/ React.createElement(LeafletProvider, {\n            value: context\n        }, props.children) : null;\n    };\n}\nLayersControl.BaseLayer = createControlledLayer(function addBaseLayer(layersControl, layer, name) {\n    layersControl.addBaseLayer(layer, name);\n});\nLayersControl.Overlay = createControlledLayer(function addOverlay(layersControl, layer, name) {\n    layersControl.addOverlay(layer, name);\n});\n","import { DomUtil } from 'leaflet';\nfunction splitClassName(className) {\n    return className.split(' ').filter(Boolean);\n}\nexport function addClassName(element, className) {\n    splitClassName(className).forEach((cls)=>{\n        DomUtil.addClass(element, cls);\n    });\n}\nexport function removeClassName(element, className) {\n    splitClassName(className).forEach((cls)=>{\n        DomUtil.removeClass(element, cls);\n    });\n}\nexport function updateClassName(element, prevClassName, nextClassName) {\n    if (element != null && nextClassName !== prevClassName) {\n        if (prevClassName != null && prevClassName.length > 0) {\n            removeClassName(element, prevClassName);\n        }\n        if (nextClassName != null && nextClassName.length > 0) {\n            addClassName(element, nextClassName);\n        }\n    }\n}\n","import { LeafletProvider, addClassName, useLeafletContext } from '@react-leaflet/core';\nimport React, { forwardRef, useState, useEffect, useImperativeHandle, useMemo } from 'react';\nimport { createPortal } from 'react-dom';\nconst DEFAULT_PANES = [\n    'mapPane',\n    'markerPane',\n    'overlayPane',\n    'popupPane',\n    'shadowPane',\n    'tilePane',\n    'tooltipPane'\n];\nfunction omitPane(obj, pane) {\n    const { [pane]: _p , ...others } = obj;\n    return others;\n}\nfunction createPane(name, props, context) {\n    if (DEFAULT_PANES.indexOf(name) !== -1) {\n        throw new Error(`You must use a unique name for a pane that is not a default Leaflet pane: ${name}`);\n    }\n    if (context.map.getPane(name) != null) {\n        throw new Error(`A pane with this name already exists: ${name}`);\n    }\n    const parentPaneName = props.pane ?? context.pane;\n    const parentPane = parentPaneName ? context.map.getPane(parentPaneName) : undefined;\n    const element = context.map.createPane(name, parentPane);\n    if (props.className != null) {\n        addClassName(element, props.className);\n    }\n    if (props.style != null) {\n        Object.keys(props.style).forEach((key)=>{\n            // @ts-ignore\n            element.style[key] = props.style[key];\n        });\n    }\n    return element;\n}\nfunction PaneComponent(props, forwardedRef) {\n    const [paneName] = useState(props.name);\n    const [paneElement, setPaneElement] = useState(null);\n    useImperativeHandle(forwardedRef, ()=>paneElement, [\n        paneElement\n    ]);\n    const context = useLeafletContext();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const newContext = useMemo(()=>({\n            ...context,\n            pane: paneName\n        }), [\n        context\n    ]);\n    useEffect(()=>{\n        setPaneElement(createPane(paneName, props, context));\n        return function removeCreatedPane() {\n            const pane = context.map.getPane(paneName);\n            pane?.remove?.();\n            // @ts-ignore map internals\n            if (context.map._panes != null) {\n                // @ts-ignore map internals\n                context.map._panes = omitPane(context.map._panes, paneName);\n                // @ts-ignore map internals\n                context.map._paneRenderers = omitPane(// @ts-ignore map internals\n                context.map._paneRenderers, paneName);\n            }\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return props.children != null && paneElement != null ? /*#__PURE__*/ createPortal(/*#__PURE__*/ React.createElement(LeafletProvider, {\n        value: newContext\n    }, props.children), paneElement) : null;\n}\nexport const Pane = /*#__PURE__*/ forwardRef(PaneComponent);\n","import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { Polygon as LeafletPolygon } from 'leaflet';\nexport const Polygon = createPathComponent(function createPolygon({ positions , ...options }, ctx) {\n    const polygon = new LeafletPolygon(positions, options);\n    return createElementObject(polygon, extendContext(ctx, {\n        overlayContainer: polygon\n    }));\n}, function updatePolygon(layer, props, prevProps) {\n    if (props.positions !== prevProps.positions) {\n        layer.setLatLngs(props.positions);\n    }\n});\n","import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { Polyline as LeafletPolyline } from 'leaflet';\nexport const Polyline = createPathComponent(function createPolyline({ positions , ...options }, ctx) {\n    const polyline = new LeafletPolyline(positions, options);\n    return createElementObject(polyline, extendContext(ctx, {\n        overlayContainer: polyline\n    }));\n}, function updatePolyline(layer, props, prevProps) {\n    if (props.positions !== prevProps.positions) {\n        layer.setLatLngs(props.positions);\n    }\n});\n","import { createElementObject, createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n    const popup = new LeafletPopup(props, context.overlayContainer);\n    return createElementObject(popup, context);\n}, function usePopupLifecycle(element, context, { position  }, setOpen) {\n    useEffect(function addPopup() {\n        const { instance  } = element;\n        function onPopupOpen(event) {\n            if (event.popup === instance) {\n                instance.update();\n                setOpen(true);\n            }\n        }\n        function onPopupClose(event) {\n            if (event.popup === instance) {\n                setOpen(false);\n            }\n        }\n        context.map.on({\n            popupopen: onPopupOpen,\n            popupclose: onPopupClose\n        });\n        if (context.overlayContainer == null) {\n            // Attach to a Map\n            if (position != null) {\n                instance.setLatLng(position);\n            }\n            instance.openOn(context.map);\n        } else {\n            // Attach to container component\n            context.overlayContainer.bindPopup(instance);\n        }\n        return function removePopup() {\n            context.map.off({\n                popupopen: onPopupOpen,\n                popupclose: onPopupClose\n            });\n            context.overlayContainer?.unbindPopup();\n            context.map.removeLayer(instance);\n        };\n    }, [\n        element,\n        context,\n        setOpen,\n        position\n    ]);\n});\n","import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { Rectangle as LeafletRectangle } from 'leaflet';\nexport const Rectangle = createPathComponent(function createRectangle({ bounds , ...options }, ctx) {\n    const rectangle = new LeafletRectangle(bounds, options);\n    return createElementObject(rectangle, extendContext(ctx, {\n        overlayContainer: rectangle\n    }));\n}, function updateRectangle(layer, props, prevProps) {\n    if (props.bounds !== prevProps.bounds) {\n        layer.setBounds(props.bounds);\n    }\n});\n","import { createElementHook, createElementObject, createLayerHook, updateMediaOverlay } from '@react-leaflet/core';\nimport { SVGOverlay as LeafletSVGOverlay } from 'leaflet';\nimport { forwardRef, useImperativeHandle } from 'react';\nimport { createPortal } from 'react-dom';\nexport const useSVGOverlayElement = createElementHook(function createSVGOverlay(props, context) {\n    const { attributes , bounds , ...options } = props;\n    const container = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    container.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    if (attributes != null) {\n        Object.keys(attributes).forEach((name)=>{\n            container.setAttribute(name, attributes[name]);\n        });\n    }\n    const overlay = new LeafletSVGOverlay(container, bounds, options);\n    return createElementObject(overlay, context, container);\n}, updateMediaOverlay);\nexport const useSVGOverlay = createLayerHook(useSVGOverlayElement);\nfunction SVGOverlayComponent({ children , ...options }, forwardedRef) {\n    const { instance , container  } = useSVGOverlay(options).current;\n    useImperativeHandle(forwardedRef, ()=>instance);\n    return container == null || children == null ? null : /*#__PURE__*/ createPortal(children, container);\n}\nexport const SVGOverlay = /*#__PURE__*/ forwardRef(SVGOverlayComponent);\n","import { createElementObject, createOverlayComponent } from '@react-leaflet/core';\nimport { Tooltip as LeafletTooltip } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Tooltip = createOverlayComponent(function createTooltip(props, context) {\n    const tooltip = new LeafletTooltip(props, context.overlayContainer);\n    return createElementObject(tooltip, context);\n}, function useTooltipLifecycle(element, context, { position  }, setOpen) {\n    useEffect(function addTooltip() {\n        const container = context.overlayContainer;\n        if (container == null) {\n            return;\n        }\n        const { instance  } = element;\n        const onTooltipOpen = (event)=>{\n            if (event.tooltip === instance) {\n                if (position != null) {\n                    instance.setLatLng(position);\n                }\n                instance.update();\n                setOpen(true);\n            }\n        };\n        const onTooltipClose = (event)=>{\n            if (event.tooltip === instance) {\n                setOpen(false);\n            }\n        };\n        container.on({\n            tooltipopen: onTooltipOpen,\n            tooltipclose: onTooltipClose\n        });\n        container.bindTooltip(instance);\n        return function removeTooltip() {\n            container.off({\n                tooltipopen: onTooltipOpen,\n                tooltipclose: onTooltipClose\n            });\n            // @ts-ignore protected property\n            if (container._map != null) {\n                container.unbindTooltip();\n            }\n        };\n    }, [\n        element,\n        context,\n        setOpen,\n        position\n    ]);\n});\n","import { createElementObject, createLayerComponent, extendContext, updateMediaOverlay } from '@react-leaflet/core';\nimport { VideoOverlay as LeafletVideoOverlay } from 'leaflet';\nexport const VideoOverlay = createLayerComponent(function createVideoOverlay({ bounds , url , ...options }, ctx) {\n    const overlay = new LeafletVideoOverlay(url, bounds, options);\n    if (options.play === true) {\n        overlay.getElement()?.play();\n    }\n    return createElementObject(overlay, extendContext(ctx, {\n        overlayContainer: overlay\n    }));\n}, function updateVideoOverlay(overlay, props, prevProps) {\n    updateMediaOverlay(overlay, props, prevProps);\n    if (typeof props.url === 'string' && props.url !== prevProps.url) {\n        overlay.setUrl(props.url);\n    }\n    const video = overlay.getElement();\n    if (video != null) {\n        if (props.play === true && !prevProps.play) {\n            video.play();\n        } else if (!props.play && prevProps.play === true) {\n            video.pause();\n        }\n    }\n});\n","import { createElementObject, createTileLayerComponent, updateGridLayer, withPane } from '@react-leaflet/core';\nimport { TileLayer } from 'leaflet';\nexport const WMSTileLayer = createTileLayerComponent(function createWMSTileLayer({ eventHandlers: _eh , params ={} , url , ...options }, context) {\n    const layer = new TileLayer.WMS(url, {\n        ...params,\n        ...withPane(options, context)\n    });\n    return createElementObject(layer, context);\n}, function updateWMSTileLayer(layer, props, prevProps) {\n    updateGridLayer(layer, props, prevProps);\n    if (props.params != null && props.params !== prevProps.params) {\n        layer.setParams(props.params);\n    }\n});\n","import { createControlComponent } from '@react-leaflet/core';\nimport { Control } from 'leaflet';\nexport const ZoomControl = createControlComponent(function createZoomControl(props) {\n    return new Control.Zoom(props);\n});\n","export { useMap, useMapEvent, useMapEvents } from './hooks.js';\nexport { AttributionControl } from './AttributionControl.js';\nexport { Circle } from './Circle.js';\nexport { CircleMarker } from './CircleMarker.js';\nexport { FeatureGroup } from './FeatureGroup.js';\nexport { GeoJSON } from './GeoJSON.js';\nexport { ImageOverlay } from './ImageOverlay.js';\nexport { LayerGroup } from './LayerGroup.js';\nexport { LayersControl } from './LayersControl.js';\nexport { MapContainer } from './MapContainer.js';\nexport { Marker } from './Marker.js';\nexport { Pane } from './Pane.js';\nexport { Polygon } from './Polygon.js';\nexport { Polyline } from './Polyline.js';\nexport { Popup } from './Popup.js';\nexport { Rectangle } from './Rectangle.js';\nexport { ScaleControl } from './ScaleControl.js';\nexport { SVGOverlay } from './SVGOverlay.js';\nexport { TileLayer } from './TileLayer.js';\nexport { Tooltip } from './Tooltip.js';\nexport { VideoOverlay } from './VideoOverlay.js';\nexport { WMSTileLayer } from './WMSTileLayer.js';\nexport { ZoomControl } from './ZoomControl.js';\n"],"names":[],"sourceRoot":""}